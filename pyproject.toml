[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool.nitpick]
style = "yastyleguide-styles/nitpick-yastyle.toml"

[tool.poetry]
authors = ["levkovalenko <levozavr@mail.ru>"]
description = "Yet another styleguide."
keywords = [
  "flake8",
  "flake8-plugin",
  "linter",
  "yastyleguide",
  "styleguide",
  "code quality",
  "pycqa",
]
license = "MIT"
name = "yastyleguide"
readme = "README.md"
repository = "https://github.com/levkovalenko/yastyleguide"
version = "0.2.0"

classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Framework :: Flake8",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
]

[tool.poetry.dependencies]
black = "^23.1.0"
flake8 = "^6.0.0"
flake8-annotations = "^3.0.0"
flake8-annotations-complexity = "^0.0.7"
flake8-async = "^22.11.14"
flake8-black = "^0.3.6"
flake8-builtins = "^2.1.0"
flake8-cognitive-complexity = "^0.1.0"
flake8-comprehensions = "^3.10.1"
flake8-docstrings = "^1.7.0"
flake8-expression-complexity = "^0.0.11"
flake8-functions = "^0.0.7"
flake8-isort = "^6.0.0"
flake8-noqa = "^1.3.1"
flake8-print = "^5.0.0"
flake8-pyproject = "^1.2.2"
flake8-requirements = "^1.7.7"
flake8-spellcheck = "^0.28.0"
flake8-string-format = "^0.3.0"
flake8-pep585 = "^0.1.7"
isort = "^5.12.0"
nitpick = "^0.32.0"
pep8-naming = "^0.13.3"
python = "^3.9"
requests-cache = "0.9.8"
pre-commit = "^3.1.1"


[tool.poetry.group.dev.dependencies]
pytest = "^7.2.2"
jupyter = "^1.0.0"
mypy = ">=1.1.1"
commitizen = "^2.42.1"

[tool.poetry.plugins."flake8.extension"]
YAS = "yastyleguide.plugin:YASPlugin"

[[tool.poetry.source]]
name = "yastyleguide"
secondary = true
url = "https://gitlab.com/api/v4/projects/31783240/packages/pypi/simple"

[tool.flake8]
count = true
dictionaries = ["en_US", "python", "technical", "pandas"]
docstring-convention = "google"
exclude = [
  ".git",
  "__pycache__",
  ".cache",
  ".mypy_cache",
  "dist",
  ".venv",
  "tests",
]
inline-quotes = "\""
max-line-count = 200
max-line-length = 88
per-file-ignores = ["tests/**.py:S101,D103", "**__init__.py:F401"]
show-source = true
statistics = true
ignore = ["D100", "D104", "W503", "ANN002", "ANN003", "ANN101", "ANN102", "ANN204"]
max-annotations-complexity = 4
max-complexity = 3
max-expression-complexity = 9
max-line-complexity = 15


[tool.isort]
profile = "black"

[tool.black]
max-line-length = 88

[tool.mypy]
exclude = ["tests", ".venv"]
check_untyped_defs = true

[tool.commitizen]
name = "cz_customize"

[tool.commitizen.customize]
message_template = "{{change_type}}[{{issue_number}}]:{% if show_message %} {{message}}{% endif %}"
example = "docs[90]: add new docs."
schema = "<type>[<issue_number>]: <body>"
schema_pattern = "(fix|wip|docs|sub|ref)(\\[\\d+\\])?:(\\s.*)"
change_type_order = ["wip", "fix", "docs", "sub", "ref"]
commit_parser = "^(?P<change_type>fix|wip|docs|sub|ref)\\(\\[?P<issue_number>\\]\\):\\s(?P<message>.*)?"

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
message = "Select the type of change you are committing:"

[[tool.commitizen.customize.questions.choices]]
value = "wip"
name = "wip: Work in progress."

[[tool.commitizen.customize.questions.choices]]
value = "fix"
name = "fix: Fix something wrong."

[[tool.commitizen.customize.questions.choices]]
value = "docs"
name = "docs: Change documentation."

[[tool.commitizen.customize.questions.choices]]
value = "sub"
name = "sub: Some subsidary work."

[[tool.commitizen.customize.questions.choices]]
value = "ref"
name = "ref: Refactoring."

[[tool.commitizen.customize.questions]]
type = "input"
name = "issue_number"
message = "Issue nember:"

[[tool.commitizen.customize.questions]]
type = "input"
name = "message"
message = "Body:"

[[tool.commitizen.customize.questions]]
type = "confirm"
name = "show_message"
message = "Do you want to add body message in commit?"
